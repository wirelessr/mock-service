name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "Coverage is below 60%"
          exit 1
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Build binary
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/mock-service ./cmd/mock-service
        CGO_ENABLED=0 GOOS=darwin go build -a -installsuffix cgo -o bin/mock-service-darwin ./cmd/mock-service
        CGO_ENABLED=0 GOOS=windows go build -a -installsuffix cgo -o bin/mock-service.exe ./cmd/mock-service
    
    - name: Test binary execution
      run: |
        ./bin/mock-service --help || true
        echo '{"rules":[]}' > test-config.json
        timeout 5s ./bin/mock-service -config test-config.json -port 9999 || true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: mock-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Create test config
        mkdir -p test-config
        echo '{"rules":[{"path":"/test","response":{"message":"test"},"code":200}]}' > test-config/config.json
        
        # Run container in background
        docker run -d --name mock-service-test -p 8080:8080 \
          -v $(pwd)/test-config:/app/config \
          mock-service:test ./mock-service -config /app/config/config.json -port 8080
        
        # Wait for container to start
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Test configured endpoint
        curl -f http://localhost:8080/test || exit 1
        
        # Test default response
        RESPONSE=$(curl -s http://localhost:8080/nonexistent)
        if [ "$RESPONSE" != "{}" ]; then
          echo "Expected empty JSON object, got: $RESPONSE"
          exit 1
        fi
        
        # Check logs
        docker logs mock-service-test
        
        # Cleanup
        docker stop mock-service-test
        docker rm mock-service-test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'